/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package skywalking.v3;

option java_multiple_files = true;
option java_package = "org.apache.skywalking.apm.network.common.v3";
option csharp_namespace = "SkyWalking.NetworkProtocol.V3";
option go_package = "skywalking.apache.org/repo/goapi/collect/common/v3";

message KeyStringValuePair {
    string key = 1;
    string value = 2;
}

// since v3.1
// An extension of KeyStringValuePair represents a kind of metric value for the key.
message KeyIntValuePair {
    string key = 1;
    int64 value = 2;
}

message CPU {
    double usagePercent = 2;
}

// In most cases, detect point should be `server` or `client`.
// Even in service mesh, this means `server`/`client` side sidecar
// `proxy` is reserved only.
enum DetectPoint {
    client = 0;
    server = 1;
    proxy = 2;
}

// since v3.1
// An instantaneous point on the time-line.
// An instant represents a data point accurate to the nanosecond.
// It is constituted by a long representing epoch-seconds and an int representing nanosecond-of-second,
// which will always be between 0 and 999,999,999
message Instant {
    // The number of seconds from the epoch of 1970-01-01T00:00:00Z.
    int64 seconds = 1;
    // The number of nanoseconds, later along the time-line, from the seconds field.
    // This is always positive, and never exceeds 999,999,999.
    int32 nanos = 2;
}

