/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package skywalking.v3;

option java_multiple_files = true;
option java_package = "org.apache.skywalking.apm.network.rover.profile.v3";
option go_package = "skywalking.apache.org/repo/goapi/collect/rover/profile/v3";

import "common/Common.proto";

// Define the Rover Process profile task and upload profile data.
service ProfileService {
    // Query profile (start or stop) tasks
    rpc queryTasks (ProfileTaskQuery) returns (Commands) {
    }

    // collect profile data
    rpc collectProfileData (stream ProfileData) returns (Commands) {
    }
}

message ProfileTaskQuery {
    // rover instance id
    string roverInstanceId = 1;

    // last command timestamp
    int64 lastCommandTime = 2;
}

message ProfileData {
    // which process and task is profiled
    ProcessProfileMetadata processProfileMetadata = 1;
    // stack data in one task(thread)
    repeated ProfileStackMetadata stacks = 2;
    // stack counts
    ProfileStackCounts stackCounts = 3;
}

message ProcessProfileMetadata {
    // profile task id
    string taskId = 1;
    // profiled process id
    string processId = 2;
    // the start time of this profiled process
    int64 profileStartTime = 3;
    // report time
    int64 currentTime = 4;
}

message ProfileStackMetadata {
    // stack type
    ProfileStackType stackType = 1;
    // stack id from kernel provide
    int32 stackId = 2;
    // stack symbols
    repeated string stackSymbols = 3;
}

message ProfileStackCounts {
    // the stack dump count
    int32 dumpCount = 1;
    // the stack sample data count, such as total IO latency time when profile IO latency
    int32 sampleCount = 2;
}

enum ProfileStackType {
    PROCESS_KERNEL_SPACE = 0;
    PROCESS_USER_SPACE = 1;
}